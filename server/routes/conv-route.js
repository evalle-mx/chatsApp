/* Libraries and dependencies */
const express = require('express');
const owner = process.env.OWNER;
const convColl = process.env.CHAT_COLL;
const { getChat, getChatUpd } = require('../utils/assembler')

// convRoutes is an instance of the express router. We use it to define our routes.
// The router will be added as a middleware and will take control of requests starting with path /record.
const convRoutes = express.Router();

// This will help us connect to the database
const dbo = require('../db/conn');

// This help convert the id from string to ObjectId for the _id.
const ObjectId = require('mongodb').ObjectId;

/* ############   CRUD   ###########  */
/* GET: This section will help you get a list of all the records.  (endPoint, database, collection) */
convRoutes.route('/conversation')
    .get( function (req, res) {
        let db_connect = dbo.getDb();
        let myquery = { agent:owner };
        // {};
        console.log(`fetching documents IN database: ${convColl}, by `, myquery);
        db_connect
            .collection(convColl)   //.collection('chats')
            .find( myquery )
            .toArray( function (err, result) {
                if(err) throw err;
                if(result){
                    console.log(`${result.length} records`);
                }
                res.json(result);
            });
    });

/* CREATE:  This section will help you CREATE a new record. */
convRoutes.route('/conversation/add')
        .post( function (req, res) {
            let db_connect = dbo.getDb();
            // const {body} = req;
            let newChat = getChat(req.body);
            /* {
                number: body.number, title: body.title, agent: body.agent,
                caseType: body.caseType, descriptions: body.descriptions };
               var result = {  "acknowledged": true, "insertedId": "62dffc96e281d7214717eb59" };
            */
            console.log('<Route> Inserting Chat:', newChat);
            db_connect
                .collection(convColl)   //.collection('chats')
                .insertOne(newChat, function(err, result){
                    if(err) throw err;
                    res.json(result);
                });
            //res.json(result);
        });
/* READ: This section will help you GET a single record by id */
convRoutes.route('/conversation/:id')
    .get( function(req, res) {
        //* param is received as String
        let db_connect = dbo.getDb();
        // let myquery = { number: parseInt(req.params.id)  }; //Parse to Integer
        let myquery = { _id: ObjectId( req.params.id )};  //in case id is the _id generated by MongoDB
        //console.log('Reading with the query:', myquery);
        db_connect
            .collection(convColl)   //.collection('chats')
            .findOne( myquery, function(err, result){
                if(err) throw err;
                if(!result){
                    console.log('Any document can be found');
                }
                res.json(result );
            });
    });   
/* UPDATE: This section will help you UPDATE a record by id. */
convRoutes.route('/conversation/:id')
    .put( function (req, res) {
        let db_connect = dbo.getDb();
        let affected = -1;
        // let myquery = { number: parseInt(req.params.id)  }; //Parse to Integer
        let myquery = { _id: ObjectId( req.params.id )};  //in case id is the _id generated by MongoDB
        // console.log('Update with the query:', myquery);
        let newvalues = getChatUpd(req.body)
        // {   
        //     $set: {     
        //         number: req.body.number,
        //         title: req.body.title,
        //         agent: req.body.agent   
        //     }, 
        //    };
        db_connect
           .collection(convColl)   //.collection('chats')
           .updateOne(myquery, newvalues, function (err, result) {
             if (err) throw err;
            //  console.log(result);
             if(result.modifiedCount!=undefined) affected = result.modifiedCount; //using !=undefined cause (0) will return false
             console.log(`UPDATE: ${affected} document(s) updated/replaced`);
             res.json(result);
           });
    });

/* DELETE:  This section will help you DELETE a record */
convRoutes.route('/conversation/:id')
    .delete( function(req, res){
        let db_connect = dbo.getDb();
        // let myquery = { number: parseInt(req.params.id)  }; //Parse to Integer        
        let myquery = { _id: ObjectId( req.params.id )}; //in case id is the _id generated by MongoDB
        let affected = -1;
        //console.log('Delete with the query:', myquery);
        db_connect
            .collection(convColl)   //.collection('chats')
            .deleteOne(myquery, function(err, obj){
                if(err) throw err; /* console.log(obj);*/
                if(obj.deletedCount!=undefined) affected = obj.deletedCount; //using !=undefined cause (0) will return false
                console.log(`<DELETE> ${affected} document(s) deleted`);
                res.json(obj);
            });
    });

/* ############   EXPORT MODULE   ###########  */
module.exports = convRoutes;
